<!DOCTYPE html>
<html>

	<head>
    <link rel="stylesheet" type="text/css" href="css/main.css" />
	</head>
	<style>
    .hide {
      display: none;
    }

    h2.stream, div.item {
      font-family: chalkduster;
    }

    table {
      border-collapse: collapse;
      width: 100%;
    }
    th {
      text-align: left;
    }
    td, th {
      padding: 6px 9px;
    }

		h2.stream {
      background-color: #56C4E8;
      color: black;
      display: inline-block;
      padding: 6px 9px;
      box-shadow: 3px 2px 5px #888888;
      margin: 1px 1px;
      min-width: 8em;
/*
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
*/
      font-size: 0.8em;
      cursor: pointer;
    }


    div.item {
      background-color: #FFDF25;
      color: black;
      display: inline-block;
      padding: 6px 9px;
      box-shadow: 3px 2px 5px #888888;
      margin: 1px 1px;
      width: 8em;
/*
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
*/
      font-size: 0.8em;
      cursor: pointer;
    }

    div.item-pink {
      background-color: #EF5AA1;
    }
    div.item-purple {
      background-color: #AE86BC;
    }
    div.item-blue {
      background-color: #56C4E8;
    }
    div.item-orange {
      background-color: #FAA457;
    }
    div.item-green {
      background-color: #89B18C;
    }

    div.item-yellow {
      background-color: #FFDF25;
    }

    div.item-blue {
      background-color: #82ACB8;
    }

    div.item-silver {
      background-color: #8A8FA3;
    }

    div.currentItem {
      box-shadow: 3px 2px 5px #333;
    }

    table th {
      width: 30%;
    }
    table th.stream {
      width: 10%;
    }

    div.currentItemPanel {
      position: fixed;
      bottom: 1em;
      padding: 6px 9px;
      width: 24em;
			height: 10em;
      border: none;
			top: 50%;
			left: 50%;
			margin-top: -7em;
			margin-left: -12em;
      box-shadow: 3px 2px 5px #888888;
			border: 3px solid white;
    }

    div.currentItemPanel div.status span {
      font-weight: bold;
    }

    div.currentItemPanel div.note {
      position: absolute;
      bottom: 0;
      right: 0.7em;
    }

    h2, h3 {
      font-weight: normal;
    }

		h2 {
			font-size: 1em;
		}

    div.currentItemPanel h2 {
      font-family: chalkduster;
    }

		div.currentItemPanel input, div.currentItemPanel textarea {
			font-family: chalkduster;
			background-color: transparent;
			width: 21em;
			height: 8em;
		}

    div.currentItemPanel ul {
      position: absolute;
      bottom: 0.1em;
      left: 0.7em;
      padding: 0;
      margin: 0;
    }

    div.currentItemPanel ul li {
      list-style: none;
      display: inline-block;
    }

    div.currentItemPanel ul li:nth-child(2):after {
      content: ' | ';
    }

    div.currentItemPanel ul li.hide {
      display: none;
    }

    .action a {
      text-decoration: none;
    }

    div.note {
      font-size: 0.8em;
    }

    th.alert {
      color: red;
    }

		td.droptarget {
			border: 1px dashed black;
		}

		tr.stream td {
			padding-bottom: 1em;
		}

		div.newitem {
			font-size: 0.8em;
		}

		div.currentItemPanel a.close {
			position: absolute;
			top: 0.3em;
			right: 0.7em;
		}
	</style>
	<script>
	var t1,t2;
	function allowDrop(ev) {
	  ev.preventDefault();
		var t = $( ev.target );
		if ( t !== t1 ) {
//			console.log( t1 );
			t1 = t;

			t.addClass( 'droptarget' );
		}
	}

	function leaveDrop(ev) {
	  ev.preventDefault();
		var t = $( ev.target );
		if ( t !== t2 ) {
			console.log( t2 );
			t2 = t;

			t.removeClass( 'droptarget' );
		}
	}

	function drag(ev) {
	    ev.dataTransfer.setData("text", ev.target.id);
	}

	var t,d,item;

	function updateExistingItem( ) {

	}

	function createNewItem( target ) {
		var dropStreamId = Number(target[0].parentNode.id.substring( 6 ));
		var stream = vm.board.streamIdx[dropStreamId];
		var status = Status.TODO;

		if ( target.hasClass( "Status.TODO" ) ) {
			status = Status.TODO;
		} else if ( target.hasClass( "Status.DOING" ) ) {
			status = Status.DOING;
		} else if ( target.hasClass( "Status.DONE" ) ) {
			status = Status.DONE;
		} else {
			console.log( "Requested status does not exist: ", target.class );
		}

		var dto = {
								ID: -1,
								StreamID: dropStreamId,
								StatusID: status.id,
								Name: ''
							}

		console.log( JSON.stringify(dto) );

		$.post( "task", JSON.stringify(dto), function(new_item_id) {
			console.log( 'createNewItem. 10. new_item_id: ', new_item_id );
			var item = new Item( Number(new_item_id), '', status.id, stream );
			vm.board.addItem( stream, item );
		});
	}

	function drop(ev) {
	    ev.preventDefault();

	    var data = ev.dataTransfer.getData("text");
			t = $( ev.target );
			t.removeClass( 'droptarget' );

			d = document.getElementById(data);
			var id=d.id.substring(4);
			if ( id === "new" ) {
				createNewItem( t );
				return;
			}

			console.log( 'drop.1. ', d );
			item = vm.board.itemIdx[d.id.substring(4)];
			console.log( 'drop.1. ', d.id.substring(4) );
			if ( t.hasClass( "Status.TODO" ) ) {
				item.setStatusToDo();
			} else if ( t.hasClass( "Status.DOING" ) ) {
				item.setStatusDoing();
			} else if ( t.hasClass( "Status.DONE" ) ) {
				item.setStatusDone();
			} else {
				console.log( "Requested status does not exist: " + s );
			}

			var dropStreamId = t[0].parentNode.id.substring( 6 );
			if ( item.stream.id !==  Number(dropStreamId) ) {
				vm.board.moveStream( item, dropStreamId );
				console.log( "Move", item.stream.id, dropStreamId );
			}

			console.log( JSON.stringify(item.getDTO()) );
			$.post( "task/" + item.id(), JSON.stringify(item.getDTO()), function() {
				console.log( "Update" );
			});
		}

		function updateItemText( ev ) {
			console.log( 'updateItemText.1. ', ev );
			item = vm.board.itemIdx[ev.target.id.substring(4)];
			item.l( ev.target.innerText );

			console.log( item.getDTO(), item.id() );
			console.log( item );
			$.post( "task/" + item.id(), JSON.stringify(item.getDTO()), function() {
				console.log( "Posted" );
			});
		}

		function updateItemTextFromTextArea() {
			item = vm.board.currentItem();

			$.post( "task/" + item.id(), JSON.stringify(item.getDTO()), function() {
				console.log( "Posted" );
			});
		}


		function updateStreamText( ev ) {
			var stream = vm.board.streamIdx[ev.target.id.substring(6)];
			stream.l( ev.target.innerText );

			$.post( "stream/" + stream.id, JSON.stringify(stream.getDTO()), function() {
				console.log( "Posted" );
			});
		}

	</script>
	<body>
    <div data-bind="with: board">
      <table>
        <thead>
          <tr>
            <th class="stream"><div draggable="true" class="item newitem" id="itemnew" ondragstart="drag(event)">&nbsp;</div></th>
            <th>To Do</th>
            <th data-bind='css: { alert: doingCount() > 1 }'>Doing</th>
            <th>Done</th>
          </tr>
        </thead>
        <tbody data-bind="foreach: streams">
          <tr data-bind="attr: { id: 'stream' + id }, allowDrop: allowDrop" class="stream">
            <td><h2 onblur="updateStreamText(event)" contenteditable="true" data-bind="text: l,attr: { id: 'stream' + id }" class="stream">Stream</h2></td>
            <td data-bind="foreach: todo" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="leaveDrop(event)" class='Status.TODO'>
              <div class='item' onblur="updateItemText(event)" draggable="true" ondragstart="drag(event)" data-bind="attr: { id: 'item' + id() },css: { currentItem: isCurrentItem }, text: l, click: click">Item 1.1</div>
            </td>
            <td data-bind="foreach: doing" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="leaveDrop(event)" class='Status.DOING'>
              <div class='item' onblur="updateItemText(event)" draggable="true" ondragstart="drag(event)" data-bind="attr: { id: 'item' + id() },css: { currentItem: isCurrentItem }, text: l, click: click">Item 1.1</div>
            </td>
            <td data-bind="foreach: done" ondrop="drop(event)" ondragover="allowDrop(event)" ondragleave="leaveDrop(event)" class='Status.DONE'>
              <div class='item' onblur="updateItemText(event)" draggable="true" ondragstart="drag(event)" data-bind="attr: { id: 'item' + id() },css: { currentItem: isCurrentItem }, text: l, click: click">Item 1.1</div>
            </td>
          </tr>
        </tbody>
				<tfoot>
					<tr class="stream">
						<td><h2><a id="streamnew" class='action' data-bind='click: createstream'>Create Stream</a></h2></td>
					</tr>
				</tfoot>
      </table>

      <div class="currentItemPanel item-yellow hide" data-bind="with: currentItem, valueUpdate: valueUpdate">
        <textarea data-bind="value: l"></textarea>
				<!--
        <ul class='action'>
          <li data-bind="css: { hide: s() !== Status.TODO }"><a href='doing' data-bind="click: setStatusDoing">Move to Doing</a></li>

          <li data-bind="css: { hide: s() !== Status.DOING }"><a href='todo' data-bind="click: setStatusToDo">Move Back to ToDo</a></li>
          <li data-bind="css: { hide: s() !== Status.DOING }"><a href='done' data-bind="click: setStatusDone">Move to Done</a></li>

          <li data-bind="css: { hide: s() !== Status.DONE }"><a href='doing' data-bind="click: setStatusDoing">Move Back to Doing</a></li>
        </ul>
			-->

        <a data-bind='click: closeEditPanel' class="action close">close</a>
        <div class='note'>
          <div class="status" data-bind="with: s">Current Status is <span data-bind="text: name">Status Name</span></div>
        </div>
      </div>

    </div>

    <script src="bower_components/jquery/dist/jquery.min.js"></script>
	  <script src="bower_components/knockout/dist/knockout.js"></script>
	  <script src="bower_components/lodash/lodash.min.js"></script>
    <script>
      function Status( id, name ) {
        var self = this;

        self.id = id;
        self.name = name;
      }
      Status.TODO = new Status( 1, 'ToDo' );
      Status.DOING = new Status( 2, 'Doing' );
      Status.DONE = new Status( 3, 'Done' );
			Status.idx = [null, Status.TODO, Status.DOING, Status.DONE]

      function Item( id, l, s, stream ) {
        var self = this;
				self.id = ko.observable(id);
        self.l = ko.observable( l );
        self.s = ko.observable( Status.idx[s] );
				self.stream = stream;

				self.getDTO = function() {
					return {
						ID: Number(self.id()),
						StreamID: self.stream.id,
						StatusID: self.s().id,
						Name: self.l()
					}
				}

        self.click = function() {
          vm.board.currentItem( self );
					$( ".currentItemPanel" ).removeClass( "hide" );
					$( ".currentItemPanel textarea" ).focus();
        }

        self.setStatus = function( s ) {
          self.s( s );
        }
        self.setStatusToDo = function() {
          self.setStatus( Status.TODO );
        }
        self.setStatusDoing = function() {
          self.setStatus( Status.DOING );
        }
        self.setStatusDone = function() {
          self.setStatus( Status.DONE );
        }

				self.closeEditPanel = function() {
					$( ".currentItemPanel" ).addClass( "hide" );
					updateItemTextFromTextArea();
				}
        self.isCurrentItem = ko.computed( function() { return self == vm.board.currentItem() })
      }

      function Stream( id, l ) {
        var self = this;
				self.id = id;
        self.l = ko.observable(l);
        self.items = ko.observableArray();

        self.todo = ko.computed( function() {
          return _.filter( self.items(), function(el) {
            return el.s() === Status.TODO;
          });
        });

        self.doing = ko.computed( function() {
          return _.filter( self.items(), function(el) {
            return el.s() === Status.DOING;
          });
        });

        self.done = ko.computed( function() {
          return _.filter( self.items(), function(el) {
            return el.s() === Status.DONE;
          });
        });

				self.getDTO = function() {
					return {
						ID: self.id,
						Name: self.l()
					}
				}

        self.addItem = function( i ) {
          self.items.push( i );
					i.stream = self;
        }
				self.removeItem = function( i ) {
					self.items.remove( i );
				}

				self.allowDrop = function() {
					console.log( "allowDrop" );
				}
      }

      function Board() {
        var self = this;
				self.itemIdx = {};
        self.streams = ko.observableArray();
				self.streamIdx = {};

        self.currentItem = ko.observable();

				self.setItemId = function(item, new_id) {
					delete self.itemIdx[item.id()];
					self.itemIdx[new_id] = item;
					item.id(new_id);
				}

        self.doingCount = ko.computed( function() {
          return _.reduce( self.streams(), function( total, el ) {
            return total + el.doing().length }, 0 );
          });

				self.addStream = function( s ) {
					self.streams.push( s );
					self.streamIdx[s.id] = s;
				}
				self.addItem = function( s, i ) {
					self.streamIdx[s.id].addItem( i );
					self.itemIdx[i.id()] = i;
        }
				self.moveStream = function( item, dropStreamId ) {
					item.stream.removeItem( item );

					var newStream = self.streamIdx[dropStreamId];
					newStream.addItem( item );
				}

				self.createstream = function() {
					vm.addStream( 3, '' );
				}
      }

      function ViewModel() {
        var self = this;
        self.board = new Board();

        self.addStream = function( id, s ) {
          var s = new Stream( id, s );
          self.board.addStream( s );
          return s;
        }

      }

      var vm = new ViewModel();
      ko.applyBindings( vm );

			var b = vm.board;

			$( document ).ajaxError( function( a, b, c ) {
				console.log( a, b, c );
			});
			$( document ).keyup( function(e) {
				if ( e.keyCode === 27 ) {
					if ( vm.board.currentItem() ) {
						vm.board.currentItem().closeEditPanel();
					}
				}
			});

			$.getJSON( "stream", function( stream_list ) {
				_.each( stream_list, function(stream) {
					vm.addStream( stream.ID, stream.Name );
				});

				$.getJSON( "task", function( list ) {
					_.each( list, function(el) {
						console.log( el );
						var s = b.streamIdx[el.StreamID];
						b.addItem( s, new Item( el.ID, el.Name, el.StatusID, s ) );
					});
				});

			});

    </script>
  </body>
</html>
